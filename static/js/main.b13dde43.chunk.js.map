{"version":3,"sources":["views/Home.js","App.js","serviceWorker.js","index.js"],"names":["HomeContainer","styled","div","Navbar","Link","a","Panel","Container","BorderContainer","ColorfulBox","props","color","Border","colors","grid","i","push","length","gridOfColorfulBoxes","Home","href","role","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gvFAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAQbC,EAASF,IAAOC,IAAV,KAMNE,EAAOH,IAAOI,EAAV,KAWJC,EAAQL,IAAOC,IAAV,KAkBLK,EAAYN,IAAOC,IAAV,KAuDTM,EAAkBP,IAAOC,IAAV,KAUfO,EAAcR,IAAOC,IAAV,KACK,SAAAQ,GAAK,OAAIA,EAAMC,MAAQD,EAAMC,MAAQ,WAK3D,SAASC,IACL,IAAMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAS5D,OAAO,kBAACL,EAAD,KAPqB,WAExB,IADA,IAAMM,EAAO,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAKE,KAAK,kBAACP,EAAD,CAAaE,MAAOE,EAAOE,EAAEF,EAAOI,WAElD,OAAOH,EAGNI,IAKM,SAASC,IACpB,OACI,kBAACnB,EAAD,KACI,kBAACY,EAAD,MACA,kBAACL,EAAD,KACI,kBAACD,EAAD,KACI,kBAACH,EAAD,KACI,kBAACC,EAAD,CAAMgB,KAAK,mCAAX,UACA,kBAAChB,EAAD,CAAMgB,KAAK,qCAAX,YACA,kBAAChB,EAAD,CAAMgB,KAAK,+BAAX,WAEJ,6CAAkB,0BAAMC,KAAK,MAAMC,aAAW,iBAA5B,iBAClB,2BAAG,0BAAMD,KAAK,MAAMC,aAAW,2BAA5B,kCAAH,0CACA,4EACA,+BAAI,mFAAJ,MAGJ,kBAAChB,EAAD,KACI,gDACA,4BACI,4BAAI,0BAAMe,KAAK,MAAMC,aAAW,0BAA5B,gBAAJ,YAA2E,sDAA3E,KACA,0CACA,qCACA,oCACA,qCAAU,0BAAMD,KAAK,MAAMC,aAAW,yBAA5B,iBACV,iDACA,uCACA,oCACA,8CACA,sCACA,mCACA,yCC5JTC,MAJf,WACE,OAAO,kBAACJ,EAAD,OCOWK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b13dde43.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport styled from 'styled-components';\n\nconst HomeContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst Navbar = styled.div`\n  display: flex;\n  height: 50px;\n  width: 100%;\n`;\n\nconst Link = styled.a`\n  color: white;\n    margin-right: 1.5em;\n    text-decoration: none;\n    border-bottom: 4px solid transparent;\n    :hover {\n      border-bottom: 4px solid blue;\n      transition: border-bottom linear 200ms;\n    }\n`;\n\nconst Panel = styled.div`\n  width: fit-content;\n  :nth-child(1) {\n    min-width: 600px;\n    @media (max-width: 656px) {\n      min-width: 100%;\n    }\n    @media (min-width: 1300px) {\n      height: 520px; // to match nth-child(2) at this screen width\n    }\n  }\n  :nth-child(2) {\n    p {\n      margin: 0;\n    }\n  }\n`;\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  background: #000;\n  width: calc(100% - 35px);\n  height: calc(100% - 35px);\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  \n  //  inner container content styles\n  li {\n    font-size: 0.8em;\n    list-style-type: none;\n    :before { content: 'üçî'; margin-left: -20px; margin-right: 10px; } \n  }\n  p {\n    font-size: 0.9em;\n    \n  }\n  color: white;\n  font-family: 'Poppins', sans-serif;\n  font-size: 30px;\n  padding: 5rem;\n  @media (max-width: 1000px) {\n    font-size: 20px;\n    padding: 2em;\n  }\n  @media (min-width: 1000px) {\n    flex-direction: row;\n  }\n  @media (max-width: 800px) {\n    font-size: 20px;\n    padding: 2em;\n    width: calc(100% - 30px);\n    height: calc(100% - 30px);\n  }\n  @media (max-width: 600px) {\n    font-size: 16px;\n    padding: 1.2em;\n    width: calc(100% - 25px);\n    height: calc(100% - 25px); \n    justify-content: center;                       \n    ul {\n      padding-left: 1.3em;\n    }\n    li {\n      font-size: 1em; \n    }\n  }\n  @media (min-width: 1300px) {\n    justify-content: space-evenly;\n    align-items: center;\n  }\n`\n\nconst BorderContainer = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  background: white;\n  position: absolute; \n  display: flex;\n  flex-flow: row wrap;\n`\n\nconst ColorfulBox = styled.div`\n  background-color: ${props => props.color ? props.color : 'black'};\n  width: 25%;\n  height: 25%;\n`;\n\nfunction Border() {\n    const colors = ['#ed1c24', '#f7ee7f', '#59C9A5', '#48ACF0', '#805D93']\n    \n    const gridOfColorfulBoxes = function () {\n        const grid = [];\n        for (let i = 0; i < 16; i++) {\n            grid.push(<ColorfulBox color={colors[i%colors.length]}/>)\n        }\n        return grid;\n    }\n    return <BorderContainer>\n        {gridOfColorfulBoxes()}\n        </BorderContainer>\n\n}\n\nexport default function Home() {\n    return (\n        <HomeContainer>\n            <Border/>\n            <Container>\n                <Panel>\n                    <Navbar>\n                        <Link href=\"https://github.com/jamesroyston\">Github</Link>\n                        <Link href=\"https://linkedin.com/in/jtroyston\">LinkedIn</Link>\n                        <Link href=\"https://dev.to/jamesroyston\">Dev.to</Link>\n                    </Navbar>\n                    <h1>James Royston <span role=\"img\" aria-label=\"smiling emoji\">üòÅ</span></h1>\n                    <p><span role=\"img\" aria-label=\"male technologist emoji\">üë®‚Äçüíª</span> Software Engineer / Frontend Obsessed</p>\n                    <p>Writing React.js applications at Anautics OKC</p>\n                    <p>(<em>heads up, personal projects are pinned on my github</em>)</p>\n                </Panel>\n                    \n                <Panel>\n                    <p>What I'm good at:</p>\n                    <ul>\n                        <li><span role=\"img\" aria-label=\"magnifying glass emoji\">üîç</span> Google (<em>the search engine, lol</em>)</li>\n                        <li>JavaScript</li>\n                        <li>HTML5</li>\n                        <li>CSS3</li>\n                        <li>React <span role=\"img\" aria-label=\"sparkling heart emoji\">üíñ</span></li>\n                        <li>Styled Components</li>\n                        <li>Express</li>\n                        <li>Node</li>\n                        <li>Mongo/Mongoose</li>\n                        <li>Heroku</li>\n                        <li>Git</li>\n                        <li>Agile</li>\n                    </ul>\n                </Panel>\n            </Container>\n        </HomeContainer>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Home from './views/Home'\n\nfunction App() {\n  return <Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}