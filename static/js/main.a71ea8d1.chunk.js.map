{"version":3,"sources":["views/Home.js","App.js","serviceWorker.js","index.js","views/profile.jpg"],"names":["Container","styled","div","Body","Img","img","Home","src","profile","alt","role","aria-label","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gqBAIA,IAAMA,EAAYC,IAAOC,IAAV,KAMTC,EAAOF,IAAOC,IAAV,KAWJE,EAAMH,IAAOI,IAAV,KAIM,SAASC,IACpB,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,KAEI,kBAACC,EAAD,CAAKG,IAAKC,IAASC,IAAI,OACvB,iDAAsB,0BAAMC,KAAK,MAAMC,aAAW,gBAA5B,iBACtB,2BAAG,+CACH,+BAEI,4BACI,4BACI,uBAAGC,KAAK,mCAAR,WAEJ,4BACI,uBAAGA,KAAK,qCAAR,aAEJ,4BACI,uBAAGA,KAAK,+BAAR,aAIZ,2BACI,yCACW,uBAAGA,KAAK,qCAAR,8BAGf,0GAE4E,8BAAM,uBAAGA,KAAK,yBAAR,YAAN,MAF5E,0CAG2C,uBAAGA,KAAK,wBAAR,YAH3C,KAGwF,uBAAGA,KAAK,kCAAR,qBAHxF,SAG4J,uBACxJA,KAAK,0BADmJ,qBAH5J,KAMA,6BAEA,0CACA,4BACI,4BAAI,uBACAA,KAAK,oGADL,yECtDTC,MAJf,WACE,OAAO,kBAACP,EAAD,OCOWQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.a71ea8d1.chunk.js","sourcesContent":["import React from 'react';\nimport profile from './profile.jpg';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  font-size: 18px;\n`;\n\nconst Body = styled.div`\n  padding: 3rem 0;\n  margin: 0 auto;\n  width: 35rem;\n\n  @media (max-width: 700px) {\n\n  width: 90%;\n  }\n`;\n\nconst Img = styled.img`\n  width: 15rem;\n`;\n\nexport default function Home() {\n    return (\n        <Container>\n            <Body>\n\n                <Img src={profile} alt=\"me\"/>\n                <h1>I'm James Royston <span role=\"img\" aria-label=\"waving emoji\">ðŸ‘‹</span></h1>\n                <p><small>Follow me: </small></p>\n                <small>\n\n                    <ul>\n                        <li>\n                            <a href=\"https://github.com/jamesroyston\">Github</a>\n                        </li>\n                        <li>\n                            <a href=\"https://linkedin.com/in/jtroyston\">LinkedIn</a>\n                        </li>\n                        <li>\n                            <a href=\"https://dev.to/jamesroyston\">Dev.to</a>\n                        </li>\n                    </ul>\n                </small>\n                <p>\n                    <small>\n                        Email: <a href=\"mailto://jamesroyston03@gmail.com\">jamesroyston03@gmail.com</a>\n                    </small>\n                </p>\n                <p>\n                    \n                I'm a software engineer in the midwest, working on React.js applications at <span><a href=\"https://anautics.com/\">Anautics</a>. </span> \n                    My favorite technologies right now are <a href=\"https://reactjs.org/\">React.js</a>, <a href=\"https://styled-components.com/\">styled components</a>, and <a\n                    href=\"https://expressjs.com/\">Express + Node.js</a>.</p>\n\n                <hr/>\n\n                <p>Blog posts:</p>\n                <ul>\n                    <li><a\n                        href=\"https://dev.to/jamesroyston/how-to-deploy-your-express-mongodb-api-react-frontend-to-heroku-4p8m\">How\n                        to deploy your express-mongoDB API + React frontend to Heroku</a></li>\n                </ul>\n\n            </Body>\n        </Container>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Home from './views/Home'\n\nfunction App() {\n  return <Home />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.28123111.jpg\";"],"sourceRoot":""}